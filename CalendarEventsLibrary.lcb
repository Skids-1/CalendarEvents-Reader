/**
Summary:	Confirms access to calendar database and returns an array of events.
Description: This library provides two commands that enable the calling application to
obtain a list of calendar events that fall between two dates.

It does not provide any commands to change the events (Yet).

Target: Query the objective-c EventKit Eventstore object.
output: a) Authorisation Status & b) An array of events.

Example:
	put smkCheckAuth() into tAuthStatus
   if tAuthStatus is "Authorised" then
      put smkGetListOfEvents("2019-01-01","2020-02-07") into tArray
   else
      answer "Error, You need to grant permission for this application to access Calendars."
   end if

Description:
Provides two handlers that enable the application to obtain an array of calendar evants.
Note, This library is MIT licensed (permissive).
Please share and share a like.

OS:mac
Platforms:desktop

References: https://developer.apple.com/documentation/eventkit?language=objc

Tags: Library, Events, calendar, Eventstore

*/
library net.anvic.skids.calendarevents

use com.livecode.foreign
use com.livecode.objc

metadata title is "List Calendar Events Library"
metadata author is "Simon (Skids) Knight"
metadata version is "1.0.4"

metadata dated is "15th Feb 2020"


-- Last updated : 15 Feb 2020



-- bind the memory allocation handler - ok
private foreign handler ObjC_EKEventStoreAlloc() \
			returns optional ObjcRetainedID \
			binds to "objc:EventKit>EKEventStore.+alloc"

-- bind the initialisation of new object - ok
private foreign handler ObjC_EKEventStoreInit(in pObj as ObjcRetainedID,in EKEntityMaskEvent as CUInt) \
			returns optional ObjcID \
			binds to "objc:EventKit>EKEventStore.-initWithAccessToEntityTypes:"


/*Check authorisation to access Events - ok
// In Objective-C the type returned from authorizationStatusForEntityType is defined as NSInteger (int on 32bit processor or long on 64bit processor)*/
private foreign handler ObjC_EKEventStoreAuthStatus(in pEKEntityMaskEvent as CUint) \
			returns CULong \
			binds to "objc:EventKit>EKEventStore.+authorizationStatusForEntityType:"

--from Trevore Deore array wrapper module
private foreign handler ObjC_NSArrayComponentsJoinedByString(in pObj as ObjcId, in pSep as objcID) \
						returns ObjcId \
						binds to "objc:NSArray.-componentsJoinedByString:"

private foreign handler ObjC_EKCalendarsForEntityType(in pObj as ObjcRetainedID, in EKEntityMaskEvent as CUInt ) \
			returns ObjcId \
			binds to "objc:EventKit>EKEventStore.-calendarsForEntityType:"

private foreign handler ObjC_EKEventsmatchingPredicate(in pObj as ObjcRetainedID, in EKpredicate as objcID ) \
			returns ObjcId \
			binds to "objc:EventKit>EKEventStore.-eventsMatchingPredicate:"

private foreign handler ObjcNSDateFormatterAlloc() \
		returns optional ObjcRetainedID \
		binds to "objc:NSDateFormatter.+alloc"

private foreign handler ObjcNSDateFormatterInit(in pObj as objcRetainedID) \
				returns optional ObjcRetainedID \
				binds to "objc:NSDateFormatter.-init"

private foreign handler ObjcNSDateFormatterSetdateFormat(in pObj as objcRetainedID, in pFormatString as objcID) \
			returns nothing \
			binds to "objc:NSDateFormatter.-setDateFormat:"

private foreign handler ObjcNSDateFormatterDateFromString(in pOb as objcRetainedID, in pDateString as objcID) \
			returns optional ObjcID \
			binds to "objc:NSDateFormatter.-dateFromString:"

private foreign handler ObjcNSDateFormatterNSStringFromNSDate(in pOb as objcRetainedID, in pNSDate as objcID) \
			returns optional ObjcID \
			binds to "objc:NSDateFormatter.-stringFromDate:"

private foreign handler ObjcPredicateForEventsBetweenTwoDates(pObj as objcRetainedID, in pStart as objcID, pEnd as objcID, in pCalArray as objcID) \
			returns optional objcID \
			binds to "objc:EventKit>EKEventStore.-predicateForEventsWithStartDate:endDate:calendars:"

private foreign handler ObjC_NSURLAbsoluteString(in pNSURL as ObjcId) \
        returns ObjcId \
		  binds to "objc:NSURL.-absoluteString"

	/* EKEvent Object properties */
private foreign handler Objc_EventTitle(in pEventObj as objcID) \
			returns optional objcID \
			binds to "objc:EventKit>EKEvent.title"

private foreign handler Objc_EventStartDate(in pEventObj as objcID) \
			returns optional objcID \
			binds to "objc:EventKit>EKEvent.startDate"

private foreign handler Objc_EventEndDate(in pEventObj as objcID) \
			returns optional objcID \
			binds to "objc:EventKit>EKEvent.endDate"

private foreign handler Objc_EventId(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.eventIdentifier"

private foreign handler Objc_ExternalEventId(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.calendarItemExternalIdentifier"

private foreign handler Objc_EventIsAllDay(in pEventObj as objcID) \
						returns optional CBool \
						binds to "objc:EventKit>EKEvent.allDay"

private foreign handler Objc_EventHasNotes(in pEventObj as objcID) \
						returns optional CBool \
						binds to "objc:EventKit>EKEvent.hasNotes"

private foreign handler Objc_EventNotes(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.notes"

private foreign handler Objc_EventURL(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.URL"

private foreign handler Objc_EventLocation(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.location"

private foreign handler Objc_EventHasAlarms(in pEventObj as objcID) \
						returns optional CBool \
						binds to "objc:EventKit>EKEvent.hasAlarms"

private foreign handler Objc_EventAlarms(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.alarms"

/* get the parent calendar to read its properties */
private foreign handler Objc_ParentCalendar(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKEvent.calendar"

private foreign handler Objc_CalendarTitle(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKCalendar.title"

/* Try and get details of the Alarms, an event may have multiple alarms */
private foreign handler Objc_AlarmNSDate(in pEventObj as objcID) \
						returns optional objcID \
						binds to "objc:EventKit>EKAlarm.absoluteDate"

/* relativeOffset returns a NSTimeInterval which is a double */
private foreign handler Objc_EventRelativeAlarm(in pEventObj as objcID) \
						returns optional CDouble \
						binds to "objc:EventKit>EKAlarm.relativeOffset"

	/*private foreign handler ObjcCountOfArrayElements(pArray as objcID) \
				returns optional CUint \
				binds to "objc:NSArray.count"
				*/
-- declare static variable to store the long lived EventStore object
private variable sEventStore as optional ObjcObject



/**
Summary: Checks that the calling application is authorised to access the calendar data.
Returns :string
Description:
Calls the objective-c/cocoa method "+authorizationStatusForEntityType:" of the EKEventStore class.  This returns
an integer value in range 0-3.  This is decoded and the text decode returned to the calling application.
This is converted to a string reporting the authorisation status of application.  A status of "Authorised" is required.
If the value is other than 3 - "Authorised" then the user must grant access to the application.  This is achieved
through the "Security and Privacy" pane of system preferences. Open this and select the Privacy tab.
Next select Calendars in the pane on the left and then add the application requiring access to the pane on the right.
Ensure that the application is ticked.
The other functions in this library will not work unless the application is authorised.
*/
public handler smkCheckAuth() returns String
	// Called from LCS
	variable tAuthorisationCode as optional CULong
	put 9 into tAuthorisationCode -- set to known value

	unsafe
		put ObjC_EKEventStoreAuthStatus(0) into tAuthorisationCode
	end unsafe

	if tAuthorisationCode is 0 then
		return "NotDetermined"
	else if tAuthorisationCode is 1 then
		return "Restricted"
	else if tAuthorisationCode is 2 then
		return "Denied"
	else if tAuthorisationCode is 3 then
		return "Authorised"
	else
		return "Error, authorisation code is set to : " & tAuthorisationCode
	end if

end handler



private handler CreateEventStore() returns String
	/* Ensure that an Eventstore object exists,
	if not then create and initialise an event store. */
	if sEventStore is nothing then
		put InitialiseEventStore() into sEventStore
	end if
	-- check for problems
	if sEventStore is nothing then
		return "Error initialising EventStore"
	end if
	return "Success"
end handler



private handler InitialiseEventStore() returns ObjcObject
	variable tEventStore as optional ObjcObject
	unsafe
		put ObjC_EKEventStoreAlloc() into tEventStore
		return ObjC_EKEventStoreInit(tEventStore, 1)
	end unsafe
end handler



private handler ListOfCalendars() returns objcObject
	/* Note : Call the foreign handler to initialise an
	EventStore and check access rights, before calling
	this routine! */

	variable tCalendars as ObjcObject  //type: NSArray
	variable tType as CUint

	put 0 into tType
	unsafe
		put ObjC_EKCalendarsForEntityType(sEventStore,tType) into tCalendars
	end unsafe
	return tCalendars
end handler

/**
Summary: Calls a multitude of handlers to access the stored events.
Parameters:
pStartDate(string):start date in format yyyy-MM-dd.
pEndDate(string):end date in format yyyy-MM-dd.
Returns: an array of events that fall between the start and end dates.
The array keys are  numeric then text e.g. array[n]["title"].
The text keys are - startdate, enddate, title, hasNotes, notes, location,
calendar, allday, URL, eventID, externalID
Description:
Obtains an array of all calendar objects.  Builds a search predicate based on start and end dates.
This returns a list of event objects which are interogated and their properties stored in an array.
This is the array that is returned to the calling application.

This version retuns the following data in the Array[n]["keyword"];
startdate, enddate, title, hasNotes, notes, location, calendar, allday, URL,
eventID, externalID, hasAlarms, alarm_AbsoluteDate, alarm_RelativeSecs .

The alarms assocciated with an event are returned in a string delimited by ";".
alarm_RelativeSecs lists alarms that are relative to the event's date and time,
in seconds, a negative value indicates an alarm before the event.

Note that details of alarms are only available about events that you own.

An example of a returned date is "2019-01-04,10:00:00,GMT,Fri,Jan,04,2019".

Keys 'hasNotes' and 'allday' are either "true" or "false".
The remainder are all text as entered into the Calendar application.
*/

public handler smkGetListOfEvents(in pStartDate as String, in pEndDate as String) returns Array

	/* Called from LCS:
	IN: pStartDate and pEndDate : date strings formatted as a
	delimited date string 2019-10-29

	Out : an array of events containing a limited number of fields.

	User must confirm that the application has the authorization to
	access the users calendar data.
	*/

	variable tResult as String
	variable tEventsA as Array
	variable tStartDate as String
	variable tEndDate as String
	variable tStartDateNS as ObjcObject
	variable tEndDateNS as ObjcObject
	variable tNSDate_Start as ObjcObject
	variable tNSDate_End as ObjcObject
	variable tNSDateFormatter as ObjcObject
	variable tFormatOfDateString as String
	variable tFormatOfDateStringNS as ObjcObject
	variable tNSPredicate as ObjcObject
	variable tNSCalsArray as ObjcObject

	--see http://unicode.org/reports/tr35/tr35-6.html#Date_Format_Patterns
	put "yyyy-MM-dd HH:mm" into tFormatOfDateString
-- add the times iaw the format string above.
	put pStartDate & " 00:00" into tStartDate
	put pEndDate & " 23:59" into tEndDate

-- convert the strings to NSString objects
	put StringToNSString(tStartDate) into tStartDateNS
	put StringToNSString(tEndDate) into tEndDateNS
	put StringToNSString(tFormatOfDateString) into tFormatOfDateStringNS

	unsafe
		-- Create the NSDate objects to be used in the search predicate.
		-- First alloc and init a NSdateformatter object
		put ObjcNSDateFormatterAlloc() into tNSDateFormatter
		put ObjcNSDateFormatterInit(tNSDateFormatter) into tNSDateFormatter
		-- Set the format used for dates
		ObjcNSDateFormatterSetdateFormat(tNSDateFormatter, tFormatOfDateStringNS)
		-- Create the NSDateObjects
		put ObjcNSDateFormatterDateFromString(tNSDateFormatter,tStartDateNS) into tNSDate_Start
		put ObjcNSDateFormatterDateFromString(tNSDateFormatter,tEndDateNS) into tNSDate_End
	end unsafe

	put smkCheckAuth() into tResult
	if tResult is not "Authorised" then
		put "Error!  This application has not been granted access to the calendar"  \
					into tEventsA["Error"]
		put "Go to System Pref's - Privacy, select Calendar and enable this application" \
					into tEventsA["Action"]
		return tEventsA
	end if

	-- initialise an eventstore object (if none exists)
	put CreateEventStore() into tResult
	if tResult is "Error initialising EventStore" then
		put "Error creating an Event Store" into tEventsA["Error"]
		return tEventsA
	end if
	/* Should be ready to start working with the EventStore */

	put ListOfCalendars() into tNSCalsArray  -- an NSArray of all the calendars

	unsafe
		-- build the search term or predicate
		put ObjcPredicateForEventsBetweenTwoDates(sEventStore, tNSDate_Start, tNSDate_End, tNSCalsArray) into tNSPredicate
	end unsafe
	-- Call handler that requests the events and builds an Array from them
	put ListOfEvents(tNSPredicate) into tEventsA
	return tEventsA
end handler



private handler ListOfEvents(pPredicate as objcObject) returns Array
	variable tEventsNSArray as ObjcObject
	variable tEventData as Array

	-- Call the query for events method of the EventStore
	unsafe
		put ObjC_EKEventsmatchingPredicate(sEventStore, pPredicate) into tEventsNSArray
	end unsafe

	put EKEventsConvertedToLCArray(tEventsNSArray) into tEventData
	return tEventData
end handler



private handler EKEventsConvertedToLCArray(in pEventsNSArray as ObjcObject) returns Array
	/* in : pEventNSArray - objective-c NSArray object.
	a) converts NSArray to a LC list of objective-c objects.
	b) processes each object on the list, converting its properties into a LC array.
	c) pushes the array returned by EkEventToArray onto list tEventItems.
	d) converts tEventItems into LC Array
	e) returns the new array.
	Code based on code publishes by Trevor Devore, written by Simon (Skids) Knight
	11 Feb 2020.
	*/
	variable tEvents as List
	variable tEvent as ObjcObject
	variable tEventItems as List

	if pEventsNSArray is not nothing then
		put listFromNSArray(pEventsNSArray) into tEvents
	end if

	-- Loop through the event objects in the list
	repeat for each element tEvent in tEvents
		push EkEventToArray(tEvent) onto tEventItems
	end repeat

return listToArray(tEventItems)
end handler



private handler EkEventToArray(in pEKevent as ObjcObject) returns Array
	/* in : pEKevent is an objective-c object of class EKevent.
	handler calls a number of foreign handlers that read the properties
	of the object.  These properties are then written into a LC Array variable.
	Returns: Livecode Array varable populated with details of the PEKevent.
	Code structure from Trevor Devore, code by Simon (Skids) Knight.
	v1 12th Feb 2020
	*/

	variable tEvents as Array
	variable tEKCalendar as objcObject
	variable tEKAlarms as optional objcObject


	unsafe
		put NSStringtoStr(Objc_EventTitle(pEKEvent)) into tEvents["title"]
		put NSDateToString(Objc_EventStartDate(pEKEvent)) into tEvents["startdate"]
		put NSDateToString(Objc_EventEndDate(pEKEvent)) into tEvents["enddate"]

		put NSStringtoStr(Objc_EventId(pEKEvent)) into tEvents["eventID"]
		put CBoolToStr(Objc_EventIsAllDay(pEKEvent)) into tEvents["allDay"]
		put CBoolToStr(Objc_EventHasNotes(pEKEvent)) into tEvents["hasNotes"]

		put NSStringtoStr(Objc_EventNotes(pEKEvent)) into tEvents["notes"]
		put NsURLStr(Objc_EventURL(pEKEvent)) into tEvents["URL"]
		put NSStringtoStr(Objc_EventLocation(pEKEvent)) into tEvents["location"]
		put NSStringtoStr(Objc_ExternalEventId(pEKEvent)) into tEvents["externalID"]

		put CBoolToStr(Objc_EventHasAlarms(pEKEvent)) into tEvents["hasAlarms"]


		-- Absolute alarms are stored in an array, copied to tEKAlarms
		if tEvents["hasAlarms"] is "true" then
			if Objc_EventAlarms(pEKEvent) is not nothing then
				-- first the absolute Alarms
				put Objc_EventAlarms(pEKEvent) into tEKAlarms  -- an Array
				put AbsoluteAlarmsToStr(tEKAlarms) into tEvents["alarm_AbsoluteDate"]
				-- next the relative alarms i,e the most common
				put RelAlarmsToStr(tEKAlarms) into tEvents["alarm_RelativeSecs"]
			end if
		end if

		-- Parent Calendar
		put Objc_ParentCalendar(pEKEvent) into tEKCalendar
		put NSStringtoStr(Objc_CalendarTitle(tEKCalendar)) into tEvents["calendar"]

	end unsafe
	return tEvents
end handler

private handler AbsoluteAlarmsToStr(in pEKAlarmsArray as objcObject) returns String
	/* pEKAlarmsArray is an array of EKAlarm objects.
	Handler Objc_AlarmNSDate returns an NSDate object, which is then
	converted to a String,  multiple alarma are stored in one string delimited
	by semi colons.  This string is returned. */
	variable tAlarmsList as List
	variable tNSdate as objcObject
	variable tDates as String
	variable tAlarm as objcObject

	if pEKAlarmsArray is not nothing then
		put listFromNSArray(pEKAlarmsArray) into tAlarmsList
	end if

	-- Loop through the alarm objects in the list
	repeat for each element tAlarm in tAlarmsList
		unsafe
			if Objc_AlarmNSDate(tAlarm) is not nothing then
				put Objc_AlarmNSDate(tAlarm) into tNSDate
				put NSDateToString(tNSDate) & ";" after tDates
			end if
		end unsafe
	end repeat
	if tDates ends with ";" then
		delete the last char of tDates
	end if
	return tDates
end handler

private handler RelAlarmsToStr(in pEKAlarmsArray as objcObject) returns String
	/* pEKAlarmsArray is an array of EKAlarm objects.
	Handler Objc_RelAlarmNSTimeInterval returns an NSTimeInterval object
	(type: double), which is then converted to a String,
	multiple alarma are stored in one string delimited
	by semi colons.  This string is returned. */
	variable tAlarmsList as List
	variable tNSTimeInterval as CDouble
	variable tRelTimeIntervals as String
	variable tAlarm as objcObject

	if pEKAlarmsArray is not nothing then
		put listFromNSArray(pEKAlarmsArray) into tAlarmsList
		-- Loop through the alarm objects in the list
		repeat for each element tAlarm in tAlarmsList
			unsafe
				if Objc_EventRelativeAlarm(tAlarm) is not nothing then
					put Objc_EventRelativeAlarm(tAlarm) into tNSTimeInterval
					put tNSTimeInterval formatted as string & ";" after tRelTimeIntervals
				end if
			end unsafe
		end repeat
	end if
	if tRelTimeIntervals ends with ";" then
		delete the last char of tRelTimeIntervals
	end if
	return tRelTimeIntervals
end handler

private handler NSStringtoStr(in pNSString as optional ObjcObject) returns String
	/* converts objective-c onbject type NSString into a LC string .
	Checks that the object is not empty.
	Borrowed from Trevor Devore by Skids 12 Feb 2020 */

	if pNSString is not nothing then
		return StringFromNSString(pNSString)
	else
		return ""
	end if
end handler

private handler NSDateToString(in pNSDate as optional ObjcObject) returns String
	/* Handler that converts the objective-c type NSDate into a string
	the format of the string is controlled by the format string defined
	below.
	v1 Simon (Skids) Knight 12 Feb 2020 */
	variable tNSStringDate as ObjcObject
	variable tNSDateFormatter as ObjcObject
	variable tFormatOfDateString as String
	variable tFormatOfDateStringNS as ObjcObject

	put "yyyy-MM-dd,HH:mm:ss,zzz,EEE,MMM,dd,yyyy" into tFormatOfDateString
	put StringToNSString(tFormatOfDateString) into tFormatOfDateStringNS

	if pNSDate is not nothing then
		unsafe
			-- First alloc and init a NSdateformatter object
			put ObjcNSDateFormatterAlloc() into tNSDateFormatter
			put ObjcNSDateFormatterInit(tNSDateFormatter) into tNSDateFormatter
			-- Set the format of the date
			ObjcNSDateFormatterSetdateFormat(tNSDateFormatter, tFormatOfDateStringNS)
			put ObjcNSDateFormatterNSStringFromNSDate(tNSDateFormatter, pNSDate) into tNSStringDate
		end unsafe
		return StringFromNSString(tNSStringDate)
	else
		return ""
	end if
end handler


/* Data conversion handlers below this point. */

private handler CBoolToStr(in pCbool as optional CBool) returns String
	if pCBool is true then
		return "true"
	else
		return "false"
	end if
end handler

private handler listToArray(in pList as List) returns Array
	/* Handler written by Trevor Devore to convert a list item
	into a numerically indexed LC array.
	v1 by Trevor Devore - borrowed by Skids 12 Feb 2020 */
    variable tCount as Number
    variable tArray as Array
    variable tKey as String

    repeat with tCount from 1 up to the number of elements in pList
      put tCount formatted as string into tKey
      put the empty array into tArray[tKey]
      put element tCount of pList into tArray[tKey]
    end repeat

    return tArray
  end handler

private handler NsURLStr(in pNSURL as optional ObjcObject) returns String
  	/* Handler written by Trevor Devore to convert URL to string */
   if pNSURL is not nothing then
   	variable tString as ObjcObject
      unsafe
      	put ObjC_NSURLAbsoluteString(pNSURL) into tString
      end unsafe
      return StringFromNSString(tString)
   else
      return ""
   end if
end handler

end library
